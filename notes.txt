DATA STRUCTURE using 
1. ARRAY 
Using the array allows me to understand that there are two things need by the array.
First, you have to consider the content and where you want to put
Second, you have to correctly position the content so that you easily reference it with indexing.

1.1 Sorting an Array
 The Insertion-sort Algorithm is a type of Algorithm which considers one element at a time, usually placing the element in the correct order relative to those before it.
 1. Starting the Algorithm , I consider the first element in the array, if it is smaller than the first which usually sorts itself. 
 2. Then next step is to consider the next element in the array, if it is smaller we then swap them. 
 3. I then consider the third element in the array and repeat step 2, if and only if the element is less than itself. 
 4. Consider the four element and repeat the steps.

 Pseudocode is show bellow

 Algorithm InsertSort (A):
    Input: Give a certain comparable elements
    Ouput: an order array of elements in non-descending order.
    Iterate:
        for j from 1 to n - 1
            do Insert A[j] at the proper position with A[0] , A[1] ... A[j]

1.1.1 Methods for Arrays and Random Numbers in java
1. equal(A, B) : it returns true if A and B are equal
2. fill(A, x) : it stores values in every cell of array A, provided the type of array A is defined.

3. copyOf(A, x): Returns an array of size n such that the first elements of a given set "w" is copied from A, provided w = min{n, A.lenth}
4. if n > A.length, then the last n - A.length elements in the array will be padded and set to defaults such as null and 0
5. copyOfRange(A, s, t): returns an array of size t - s such that the array is copied in order from A[s] to A[t - 1], where s < t, padded as with copyOf() if t > A.length. 
6. Sorts the array A based on natural ordering of its elements, which must be comparable. Sorting Algorithms 
7. binarySearch(A, x) : searches the sorted array A for value x, returning the index where it is found or else the index of where it could be inserted while maintaining the sorted order. 

Pseudocode Random Number Generation formular:
next = (a * cur + b ) % n;
Methods of java.util.Random class include the following:

nextBoolean(): Returns the next Pseudorandom boolean value.

nextDouble(): returns the next Pseudorandom double value between 0.0 and 1.0

nextInt(): return next Pseudorandom int value.

nextInt(n): returns the next Pseudorandom int value in the range 0 up to but not including n.

setSeed(s): sets the seed of this pseudorandom number generator to the long s.


Two-Dimensioonal Arrays and Positional Games

A common way most games work is to involve objects that reside in a two dimensional space. Software for such positional games usually need require representing objects in a 2-dimesional array where two indices let us call them i and j, which refers to the cells in the array. The first index usually refers to a row number and the second to a column number. As a result of this, the possibility of storing and maintaining two-dimensional game boards and perform other kinds of computations involving data stored in rows and columns, becomes increasing possible.
However, in java Arrays are one-dimensional; we use a single index to access each cell of an array. Nevertheless, java gives that flexibility of creating a 2-dimensional array, that is an array of arrays. That is, we can define a 2-dimensional array to be an array; with each of the cells in it becoming another array. Such a two-dimesional is often called a MATRIX.

Java gives a way to declare a twoo-dimensional array as follows:

    int[][] dataset = new int[8][0];
where 8 is the number of rows and 10 is the number of columns;


1.2 SINGLY LINKED LISTS
The linked list provides or acts as an alternative to an array structure. A simplistic defination of a linked list is; a collection of nodes which collectively forms a linear sequence. 
A linked list stores reference to an object; which in plain terms means an iterm in that sequence as well as a reference to the next node of the list. A linked list's representation heavily banks on the collaboration of many objects. When an instance of a linked list is created, it must stooe the reference of the first node in the list, usually known as the head. Without an explicit reference to the head, it is practically impossible to locate that node. The last node is called the tail. The tail can be found by traversing the linked list- usually from the head through one node to another by following the reference of each node. The tail can easily be identified, since its next reference is null. The process is usally tagged as link hopping or pointer hopping. 

The good thing about making reference to the tail is that it helps in storing the count of the nodes that comprise the list (also known as the size of the list), to avoid unnecessary repetitive counting of the nodes.

1.2.1 Inserting new nodes to the linked list
Add 
An important property of a linked list is not having fixed size, it uses space directly proportional too its current number of elements. Inserting a node into a linked list is usually done in the head, this could be considered a delimiter since the actually position to insert a node can be specified.

Algorithm addFirstNode(n);
    newest = Node(n);
    newest.next = head;
    head = newest;
    size +=1;

    Algorithm addTailNode(n);
    lastest = Node(n);
    lastest.next = null;
    tail.next = latest;
    tail = newest;
    size = size + 1;

1.2.2 Removing an element from a singly linked List.
Algorithm removeirstNode(n);
    removed_node = Node(n);
    if head == null then,
        list is empty
        head = head.next;
        size -= 1;

Implementation of a singly linked list class
- size(), isEmpty(), first(), last(), addFirst(n), addLast(n), removeFirst()


1.3 CIRCULARLY LINKED LISTS
Most times, linked lists are presumed to only store a sequence of items, in a linear order, that is from first to list. Far from this, there are actually many appplicatioons in which data can viewed as having a cyclic order, and well-defined relationship with nodes which might not be its neighbors, usually without a fixed beginning or end.
A typical example is a game with multiple players where control has to be passed, and players required to rotate.

Round-Robin Scheduling.
This is an Algorithm that allows the operating system share resources with different processes to co-exist with each other effectively sharing the use of CPUs and its resources.

A Circularly linked list is designed in such a way in where instead of the tail to have a reference of null, it points back to the head.

DOUBLY LINKED LISTS
This type of linked lists provides us with information of each node ; that is each node stores an explicit reference of the node before it and a reference to the node after it. This is known as doubly linked list. This type of list provides a variety of O(1)-time update operations including insertions and deletions of elements with unknown position within the list.

Header and Trailer Sentinels
To avoid special cases when operating near the boundaries of a doubly linked list, it helps to add special nodes at both ends of the list which are referred to as "header" at the beginning of the list and a "trailer" node at the end of the list. These nodes are known as sentinels(or guards).

Methods in a Doubly Linked List class
-size(), isEmpty(), first(), last(), addFirst()