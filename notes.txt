1. Using the array allows me to understand that there are two things need by the array.
First, you have to consider the content and where you want to put
Second, you have to correctly position the content so that you easily reference it with indexing.

Sorting an Array
 The Insertion-sort Algorithm is a type of Algorithm which considers one element at a time, usually placing the element in the correct order relative to those before it.
 1. Starting the Algorithm , I consider the first element in the array, if it is smaller than the first which usually sorts itself. 
 2. Then next step is to consider the next element in the array, if it is smaller we then swap them. 
 3. I then consider the third element in the array and repeat step 2, if and only if the element is less than itself. 
 4. Consider the four element and repeat the steps.

 Pseudocode is show bellow

 Algorithm InsertSort (A):
    Input: Give a certain comparable elements
    Ouput: an order array of elements in non-descending order.
    Iterate:
        for j from 1 to n - 1
            do Insert A[j] at the proper position with A[0] , A[1] ... A[j]


Methods for Arrays and Random Numbers in java
1. equal(A, B) : it returns true if A and B are equal
2. fill(A, x) : it stores values in every cell of array A, provided the type of array A is defined.

3. copyOf(A, x): Returns an array of size n such that the first elements of a given set "w" is copied from A, provided w = min{n, A.lenth}
4. if n > A.length, then the last n - A.length elements in the array will be padded and set to defaults such as null and 0
5. copyOfRange(A, s, t): returns an array of size t - s such that the array is copied in order from A[s] to A[t - 1], where s < t, padded as with copyOf() if t > A.length. 
6. Sorts the array A based on natural ordering of its elements, which must be comparable. Sorting Algorithms 
7. binarySearch(A, x) : searches the sorted array A for value x, returning the index where it is found or else the index of where it could be inserted while maintaining the sorted order. 

Pseudocode Random Number Generation formular:
next = (a * cur + b ) % n;
Methods of java.util.Random class include the following:

nextBoolean(): Returns the next Pseudorandom boolean value.

nextDouble(): returns the next Pseudorandom double value between 0.0 and 1.0

nextInt(): return next Pseudorandom int value.

nextInt(n): returns the next Pseudorandom int value in the range 0 up to but not including n.

setSeed(s): sets the seed of this pseudorandom number generator to the long s.